@page "/findfriends"
@inject HttpClient Http
@inject TokenStorageService TokenStorage
@inject NavigationManager Navigation
@inject CacheService CacheService

<section style="display: flex; flex-direction: column; gap: 1rem; max-width: 1000px; margin: auto;">
    <h3>Find Friends</h3>

    @if (TokenStorage.GetToken() == null)
    {
        <p>You are not authorized to view this page.</p>
        <button @onclick="NavigateToLogin" style="width: 300px;">Go to Login</button>
    }
    else
    {
        
        <input type="text" @bind="SearchQuery" @bind:event="oninput" placeholder="Search by name or email..." style="width: 300px;" />

        @if (filteredUsers == null || !filteredUsers.Any())
        {
            <p>No matching users found.</p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var user in filteredUsers)
                {
                    <tr>
                        <td>
                            <a href="/getProfile/@user.Email">@user.Name</a> 
                        </td>
                        <td>
                            <a href="/getProfile/@user.Email">@user.Email</a> 
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }
    }
</section>

@code {
    private List<UserBirth>? users;
    private List<UserBirth>? filteredUsers = new List<UserBirth>(); 
    private string searchQuery = "";
    private const string UsersCacheKey = "FindFriendsUsersCacheKey"; // Cache key

    protected override async Task OnInitializedAsync()
    {
        if (TokenStorage.GetToken() == null)
        {
            return; 
        }

        try
        {
            var currentUserEmail = TokenStorage.GetUserEmail();
            Console.WriteLine($"Current user email: {currentUserEmail}");
            // Try retrieving users from cache
            users = CacheService.GetFromCache<List<UserBirth>>(UsersCacheKey + currentUserEmail);

            if (users == null)
            {
                Console.WriteLine("Cache miss, fetching users from API...");
                users = await Http.GetFromJsonAsync<List<UserBirth>>("http://localhost:5042/getAllUsersWithBirthdays");

                if (users != null)
                {
                    users = users.Where(u => u.Email != currentUserEmail).ToList(); // Exclude current user
                    CacheService.SetCache(UsersCacheKey + currentUserEmail, users, TimeSpan.FromMinutes(5)); // Cache users for 5 mins
                }
            }

            filteredUsers = new List<UserBirth>(); // Initially empty
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching users: {ex.Message}");
            users = new List<UserBirth>();
        }
    }

    private string SearchQuery
    {
        get => searchQuery;
        set
        {
            searchQuery = value;
            FilterUsers(); // ðŸ”¥ Call function dynamically when search input changes
        }
    }

    private void FilterUsers()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredUsers = new List<UserBirth>(); // Keep empty when no input
        }
        else
        {
            filteredUsers = users?
                .Where(u => u.Email.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                            u.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }


    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    public class UserBirth
    {
        public required string Email { get; set; }
        public string Name { get; set; } = "Unknown Name";
        public DateTime Birthday { get; set; }
        public string location { get; set; } = string.Empty;
        public string SunSign { get; set; } = string.Empty;
        public string MoonSign { get; set; } = string.Empty;
        public string RisingSign { get; set; } = string.Empty;
        public int CompatibilityScore { get; set; } = -1;
    }
}
