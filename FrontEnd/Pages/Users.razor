@page "/users"
@inject HttpClient Http
@inject TokenStorageService TokenStorage
@inject NavigationManager Navigation

<h3>Top 10 Other Compatible Users</h3>

@* Enhance UI/UX:

// ALSO Implement cCACHING LATER ON FOR BETTER PERFORMANCE!!!!!!!!!!!!!

Add tooltips or a legend explaining what "Compatible" or "Not Compatible" means.

Use colors (e.g., green for compatible, red for not compatible) to make the Compatibility column visually appealing.

Error Alerts:

Replace Console.WriteLine with in-app alerts using a Blazor-friendly component library like MudBlazor or Bootstrap to enhance the user experience.

Pagination or Search Feature:

If the number of users grows, you can implement pagination or a search box to make the table easier to navigate. *@

@if (TokenStorage.GetToken() == null)
{
    <p>You are not authorized to view this page.</p>
    <button @onclick="NavigateToLogin">Go to Login</button>
}
else if (userBirths == null)
{
    <p>Loading birthdays...</p>
}
else if (@currentUserBirth == null)
{
    <p>Go to Home to Save Your Birthday...</p>
}
else if (!userBirths.Any())
{
    <p>No users with birthdays found.</p>
}
else
{
    <p>Based Off Your Given Sun Sign: @currentUserBirth.SunSign, Moon Sign: @currentUserBirth.MoonSign, and Rising Sign: @currentUserBirth.RisingSign</p>
    <table class="table">
        <thead>
            <tr>
                <th>Email</th>
                <th>Compatibility</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in userBirths)
            {
                <tr>
                    <td>@user.Email</td>
                    <td style="color:@GetCompatibilityColor(user.CompatibilityScore)">@user.CompatibilityScore%</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<UserBirth>? userBirths;
    private UserBirth? currentUserBirth;
    protected override async Task OnInitializedAsync()
    {
        if (TokenStorage.GetToken() == null)
        {
            return; // No need to fetch data if the user is not authorized
        }

        try
        {
            // Fetch the current user's email from token storage
            var currentUserEmail = TokenStorage.GetUserEmail();

            // Call the get user birthday endpoint to retrieve the current user's birthday
            currentUserBirth = await Http.GetFromJsonAsync<UserBirth>(
                $"http://localhost:5042/getBirthday/{currentUserEmail}");

            // Error handling for null currentUserBirth
            if (currentUserBirth == null)
            {
                Console.WriteLine("Current user birthday is null.");
                userBirths = new List<UserBirth>(); // Handle gracefully if the request fails
                return;
            }

            // Fetch the top 10 compatibility results from the API
            var topCompatibleUsers = await Http.GetFromJsonAsync<List<UserBirth>>(
                $"http://localhost:5042/getTop10CompatibilityWithOtherUsers/{currentUserEmail}");

            // Handle null or empty list gracefully
            if (topCompatibleUsers == null || !topCompatibleUsers.Any())
            {
                Console.WriteLine("No compatible users found.");
                userBirths = new List<UserBirth>();
                return;
            }

            Console.WriteLine($"Top compatible users count: {topCompatibleUsers.Count}");

            // Populate the userBirths list with the compatibility results
            userBirths = topCompatibleUsers;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching compatibility data: {ex.Message}");
            userBirths = new List<UserBirth>(); // Handle gracefully if the request fails
        }
    }


    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login"); // Redirects the user to a login page
    }

    private string GetCompatibilityColor(int compatibility)
    {
        return compatibility switch
        {
            > 80 => "green",
            >= 50 => "blue",
            _ => "red"
        };
    }

    public class UserBirth
    {
        public required string Email { get; set; }
        public DateTime Birthday { get; set; }
        public string location { get; set; } = string.Empty;
        public string SunSign { get; set; } = string.Empty;
        public string MoonSign { get; set; } = string.Empty;
        public string RisingSign { get; set; } = string.Empty;
        public int CompatibilityScore { get; set; } = -1;
    }

}
