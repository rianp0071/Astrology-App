@page "/users"
@inject HttpClient Http
@inject TokenStorageService TokenStorage
@inject NavigationManager Navigation

@* Enhance UI/UX:

Add tooltips or a legend explaining what "Compatible" or "Not Compatible" means.
View profiles for more information about each user.

Use colors (e.g., green for compatible, red for not compatible) to make the Compatibility column visually appealing.

Error Alerts:

Replace Console.WriteLine with in-app alerts using a Blazor-friendly component library like MudBlazor or Bootstrap to enhance the user experience.

Pagination or Search Feature:

If the number of users grows, you can implement pagination or a search box to make the table easier to navigate. *@

<section style="display: flex; flex-direction: column; gap: 1rem; max-width: 1000px; margin: auto;">
    <h3>Top 10 Other Compatible Users</h3>

    @if (TokenStorage.GetToken() == null)
    {
        <p>You are not authorized to view this page.</p>
        <button @onclick="NavigateToLogin" style="width: 300px;">Go to Login</button>
    }
    else if (userBirths == null)
    {
        <p>Loading birthdays...</p>
    }
    else if (@currentUserBirth == null)
    {
        <p>Go to Home to Save Your Birthday...</p>
    }
    else if (!userBirths.Any())
    {
        <p>No users with birthdays found.</p>
    }
    else
    {
        <p>Based Off Your Given Sun Sign: @currentUserBirth.SunSign, Moon Sign: @currentUserBirth.MoonSign, and Rising Sign: @currentUserBirth.RisingSign</p>
        <table class="table">
            <thead>
                <tr>
                    <th>Email</th>
                    <th>Compatibility</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in userBirths)
                {
                    <tr>
                        <td>@user.Email</td>
                        <td style="color:@GetCompatibilityColor(user.CompatibilityScore)">@user.CompatibilityScore%</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</section>

@inject CacheService CacheService

@code {
    private List<UserBirth>? userBirths;
    private UserBirth? currentUserBirth;

    private const string UserBirthsCacheKey = "UserBirthsCacheKey";

    private const string CurrentUserBirthCacheKey = "CurrentUserBirthCacheKey";

    protected override async Task OnInitializedAsync()
    {
        if (TokenStorage.GetToken() == null)
        {
            return; // No need to fetch data if the user is not authorized
        }

        try
        {
            var currentUserEmail = TokenStorage.GetUserEmail();

            // Fetch current user data from cache
            currentUserBirth = CacheService.GetFromCache<UserBirth>("CurrentUserBirthCacheKey");

            if (currentUserBirth == null)
            {
                currentUserBirth = await Http.GetFromJsonAsync<UserBirth>(
                    $"http://localhost:5042/getBirthday/{currentUserEmail}");

                if (currentUserBirth != null)
                {
                    CacheService.SetCache("CurrentUserBirthCacheKey", currentUserBirth, TimeSpan.FromMinutes(2));
                }
            }

            userBirths = CacheService.GetFromCache<List<UserBirth>>("UserBirthsCacheKey");

            if (userBirths == null)
            {
                userBirths = await Http.GetFromJsonAsync<List<UserBirth>>(
                    $"http://localhost:5042/getTop10CompatibilityWithOtherUsers/{currentUserEmail}");

                CacheService.SetCache("UserBirthsCacheKey", userBirths, TimeSpan.FromSeconds(30));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
            currentUserBirth = null;
            userBirths = new List<UserBirth>();
        }
    }


    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login"); // Redirects the user to a login page
    }

    private string GetCompatibilityColor(int compatibility)
    {
        return compatibility switch
        {
            > 80 => "green",
            >= 50 => "blue",
            _ => "red"
        };
    }

    public class UserBirth
    {
        public required string Email { get; set; }
        public DateTime Birthday { get; set; }
        public string location { get; set; } = string.Empty;
        public string SunSign { get; set; } = string.Empty;
        public string MoonSign { get; set; } = string.Empty;
        public string RisingSign { get; set; } = string.Empty;
        public int CompatibilityScore { get; set; } = -1;
    }
}
