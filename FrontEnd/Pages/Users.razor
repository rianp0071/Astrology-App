@page "/users"
@inject HttpClient Http
@inject TokenStorageService TokenStorage
@inject NavigationManager Navigation
@using Microsoft.Extensions.Caching.Memory;


@*USE CACHING!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*@

@* Enhance UI/UX:

// ALSO Implement cCACHING LATER ON FOR BETTER PERFORMANCE!!!!!!!!!!!!!

Add tooltips or a legend explaining what "Compatible" or "Not Compatible" means.

Use colors (e.g., green for compatible, red for not compatible) to make the Compatibility column visually appealing.

Error Alerts:

Replace Console.WriteLine with in-app alerts using a Blazor-friendly component library like MudBlazor or Bootstrap to enhance the user experience.

Pagination or Search Feature:

If the number of users grows, you can implement pagination or a search box to make the table easier to navigate. *@

<section style="display: flex; flex-direction: column; gap: 1rem; max-width: 1000px; margin: auto;">
    <h3>Top 10 Other Compatible Users</h3>

    @if (TokenStorage.GetToken() == null)
    {
        <p>You are not authorized to view this page.</p>
        <button @onclick="NavigateToLogin" style="width: 300px;">Go to Login</button>
    }
    else if (userBirths == null)
    {
        <p>Loading birthdays...</p>
    }
    else if (@currentUserBirth == null)
    {
        <p>Go to Home to Save Your Birthday...</p>
    }
    else if (!userBirths.Any())
    {
        <p>No users with birthdays found.</p>
    }
    else
    {
        <p>Based Off Your Given Sun Sign: @currentUserBirth.SunSign, Moon Sign: @currentUserBirth.MoonSign, and Rising Sign: @currentUserBirth.RisingSign</p>
        <table class="table">
            <thead>
                <tr>
                    <th>Email</th>
                    <th>Compatibility</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in userBirths)
                {
                    <tr>
                        <td>@user.Email</td>
                        <td style="color:@GetCompatibilityColor(user.CompatibilityScore)">@user.CompatibilityScore%</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</section>

@inject IMemoryCache MemoryCache

@code {
    private List<UserBirth>? userBirths;
    private UserBirth? currentUserBirth;

    private const string UserBirthsCacheKey = "UserBirthsCacheKey";

    protected override async Task OnInitializedAsync()
    {
        if (TokenStorage.GetToken() == null)
        {
            return; // No need to fetch data if the user is not authorized
        }

        try
        {
            // Fetch current user birth data first
            var currentUserEmail = TokenStorage.GetUserEmail();
            currentUserBirth = await Http.GetFromJsonAsync<UserBirth>(
                $"http://localhost:5042/getBirthday/{currentUserEmail}");

            if (currentUserBirth == null)
            {
                Console.WriteLine("Current user birth data is null.");
                userBirths = new List<UserBirth>(); // Handle gracefully if the current user's birth data is unavailable
                return;
            }

            // Check if compatibility data exists in cache
            if (!MemoryCache.TryGetValue(UserBirthsCacheKey, out List<UserBirth>? cachedUserBirths))
            {
                // Fetch compatibility data if not cached
                var topCompatibleUsers = await Http.GetFromJsonAsync<List<UserBirth>>(
                    $"http://localhost:5042/getTop10CompatibilityWithOtherUsers/{currentUserEmail}");

                cachedUserBirths = topCompatibleUsers ?? new List<UserBirth>();

                // Cache compatibility data for 10 seconds
                var cacheOptions = new MemoryCacheEntryOptions
                {
                    AbsoluteExpirationRelativeToNow = TimeSpan.FromSeconds(30)
                };
                MemoryCache.Set(UserBirthsCacheKey, cachedUserBirths, cacheOptions);
            }

            // Use cached compatibility data
            userBirths = cachedUserBirths;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
            userBirths = new List<UserBirth>(); // Handle gracefully if either API call fails
        }
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login"); // Redirects the user to a login page
    }

    private string GetCompatibilityColor(int compatibility)
    {
        return compatibility switch
        {
            > 80 => "green",
            >= 50 => "blue",
            _ => "red"
        };
    }

    public class UserBirth
    {
        public required string Email { get; set; }
        public DateTime Birthday { get; set; }
        public string location { get; set; } = string.Empty;
        public string SunSign { get; set; } = string.Empty;
        public string MoonSign { get; set; } = string.Empty;
        public string RisingSign { get; set; } = string.Empty;
        public int CompatibilityScore { get; set; } = -1;
    }
}
