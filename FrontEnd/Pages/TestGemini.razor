@page "/test"
@inject GeminiService GeminiService
@inject HttpClient Http
@inject TokenStorageService TokenStorage

<h3>Learn Your Destiny</h3>

<div>
    <!-- Date input -->
    <h5>Input Your Birthday</h5>
    <input @bind="birthday" type="date" style="width:300px;" />

    <!-- Time input -->
    <h5>Input Your Time of Birth</h5>
    <input @bind="birthTime" type="time" style="width:300px;" />

    <!-- Location input -->
    <h5>Input Your Location of Birth</h5>
    <select @bind="birthLocation" style="width:300px;">
        <option value="">Select location...</option>
        @foreach (var location in locations)
        {
            <option value="@location">@location</option>
        }
    </select>

    <!-- Buttons (moved below location field) -->
    <div class="button-container" style="display: flex; flex-direction: column; gap: 1rem; max-width: 300px;">
        @if (IsAuthenticated) 
        {
            <button @onclick="SaveBirthData">Save Birth Data</button>
        }    
        <button @onclick="DescribeSigns">Learn About My Signs</button>

        <div style="display: flex; flex-direction: column; gap: 1rem;">
            <button @onclick="DescribeHoroscope">Learn About My Horoscope</button>
            <button @onclick="DescribeCompatibility">Learn About My Compatibility</button>
        </div>
    </div>
</div>

<!-- Spinner -->
<div style="display:@(isLoading1 ? "block" : "none"); margin: 20px; text-align: center;">
    <div class="spinner">
        <div class="diamond"></div>
    </div>
</div>

<!-- Response -->
<p>@sunSignDesc</p>

<div>
    <!-- Text input (appears below) -->
    <h5>Let's Chat! Express Your Inquisitions</h5>
    <input @bind="userInput" type="text" placeholder="Write something..." style="width:300px;" />
    <button @onclick="AskGemini">Ask</button>
</div>

<!-- Spinner -->
<div style="display:@(isLoading2 ? "block" : "none"); margin: 20px; text-align: center;">
    <div class="spinner">
        <div class="diamond"></div>
    </div>
</div>

<!-- Response -->
<p>@responseText</p>


@code {
    private List<string> locations = new() { "New York, USA", "Los Angeles, USA", "Tokyo, Japan", "London, UK", 
        "San Francisco, USA",   "Berlin, Germany", "Moscow, Russia", "Beijing, China", "Mumbai, India", "Rio de Janeiro", 
        "Brazil", "Cairo, Egypt", "Dubai, UAE", "Rome, Italy", "Bangkok, Thailand",
        "Paris, France", "Sydney, Australia", "Toronto, Canada", "Frisco, Texas", "Pune, India", "Hyderabad, India" };
    private bool IsAuthenticated => !string.IsNullOrEmpty(TokenStorage.GetToken());
    private DateTime birthday = DateTime.Now;
    private DateTime birthTime = DateTime.Now; // Initialize to current time
    private string birthLocation = string.Empty;
    private string userInput = string.Empty;
    private string responseText = string.Empty;
    private string sunSignDesc = string.Empty;
    private bool isLoading1 = false;
    private bool isLoading2 = false;

    private async Task SaveBirthData()
    {
        isLoading1 = true; // Start the spinner
        sunSignDesc = string.Empty;

        // Validate input
        @* if (birthday == default || string.IsNullOrWhiteSpace(birthLocation))
        {
            Console.WriteLine("Invalid birthday or location.");
            sunSignDesc = "Please select a valid birthday and enter a location.";
            isLoading1 = false; // Stop the spinner
            return;
        } *@

        try
        {
            // Prepare the data to send to the API
            var getEmail = TokenStorage.GetUserEmail() ?? "example@email.com";
            var birthData = new
            {
                Email = getEmail,
                Birthday = birthday.ToString("yyyy-MM-ddTHH:mm:ss"),
                BirthTime = birthTime.ToString("HH:mm:ss"),
                BirthLocation = birthLocation
            };

            // Print the data to the console for debugging
            Console.WriteLine($"Sending data: {birthData.Email}, {birthData.Birthday}, {birthData.BirthTime}, {birthData.BirthLocation}");

            // Call the API endpoint
            var response = await Http.PostAsJsonAsync("http://localhost:5042/saveBirthday", birthData);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Birth data saved successfully!");
                sunSignDesc = "Birth data saved successfully!";
            }
            else
            {
                sunSignDesc = "Failed to save birth data. Check if all fields are filled correctly.";
                Console.WriteLine($"Failed to save birth data: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
        finally
        {
            isLoading1 = false; // Stop the spinner
        }
    }

    private async Task DescribeSigns()
    {
        isLoading1 = true;
        sunSignDesc = string.Empty;
        try
        {
            var descString = await descStringAsync();
            if (string.IsNullOrWhiteSpace(birthLocation))
            {
                sunSignDesc = await GeminiService.AskGeminiAsync($"Describe my sun sign based on astrology. {descString}");
            }
            else
            {
                sunSignDesc = await GeminiService.AskGeminiAsync($"Describe my sun, rising, and moon signs based on astrology. {descString}");
            }
        }
        catch (Exception ex)
        {
            sunSignDesc = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading1 = false;
        }
    }

    private async Task DescribeHoroscope()
    {
        isLoading1 = true;
        sunSignDesc = string.Empty;
        try
        {
            var descString = await descStringAsync();
            sunSignDesc = await GeminiService.AskGeminiAsync($"Describe my horoscope based on astrology. {descString}");  
        }
        catch (Exception ex)
        {
            sunSignDesc = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading1 = false;
        }
    }

    private async Task DescribeCompatibility()
    {
        isLoading1 = true;
        sunSignDesc = string.Empty;
        try
        {
            var descString = await descStringAsync();
            sunSignDesc = await GeminiService.AskGeminiAsync($"Describe my compatibility based on astrology. {descString}");
        }
        catch (Exception ex)
        {
            sunSignDesc = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading1 = false;
        }
    }

    private async Task AskGemini()
    {
        isLoading2 = true;
        responseText = string.Empty;
        try
        {
            responseText = await GeminiService.AskGeminiAsync(userInput);
        }
        catch (Exception ex)
        {
            responseText = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading2 = false;
        }
    }

    @* returns signs in a list: index 0 is sun sign, 1 is moon sign and 2 is rising sign (moon and rising arent included if location not selected) *@
    private async Task<List<string>> getSignsAsync()
    {
        // Initialize loading state
        isLoading1 = true;

        try
        {
            // Create the JSON payload
            var payload = new
            {
                Birthday = birthday,
                BirthTime = birthTime.TimeOfDay, // Extract the time portion only
                BirthLocation = string.IsNullOrWhiteSpace(birthLocation) ? "" : birthLocation
            };

            // Send a POST request to the API endpoint
            var response = await Http.PostAsJsonAsync("http://localhost:5042/getSigns", payload);

            // Check for success
            if (response.IsSuccessStatusCode)
            {
                // Parse the JSON response
                var result = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();

                if (result != null)
                {
                    // Extract response values
                    Console.WriteLine("Signs retrieved successfully!");
                    return result.Values.ToList();
                }
            }
            else
            {
                // Handle errors from the API
                Console.WriteLine($"Failed to retrieve signs. Status Code: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            // Log and display any errors encountered
            Console.WriteLine($"An error occurred while retrieving signs: {ex.Message}");
        }
        finally
        {
            // Reset loading state
            isLoading1 = false;
        }

        return new List<string>(); // Return an empty list in case of failure
    }


    private async Task<string> descStringAsync()
    {
        var signs = await getSignsAsync();

        if (string.IsNullOrWhiteSpace(birthLocation))
        {
            return $"This is my birthday: {birthday:yyyy-MM-dd} and sun sign: {signs.ElementAtOrDefault(0)}";
        }
        return $"This is my birthday: {birthday:yyyy-MM-dd}, birth time: {birthTime:HH:mm:ss}, and location: {birthLocation}. " +
            $"These are my signs: sun sign: {signs.ElementAtOrDefault(0)}, moon sign: {signs.ElementAtOrDefault(1)}, and rising sign: {signs.ElementAtOrDefault(2)}";
    }

}
