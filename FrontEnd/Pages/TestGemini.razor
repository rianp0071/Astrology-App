@page "/test"
@inject GeminiService GeminiService
@inject HttpClient Http
@inject TokenStorageService TokenStorage

<h3>Learn Your Destiny</h3>

<div>
    <!-- Date input -->
    <input @bind="birthday" type="date" style="width:300px;" />

    <!-- Time input -->
    <input @bind="birthTime" type="time" style="width:300px;" />

    <!-- Location input -->
    <select @bind="birthLocation" style="width:300px; height:1.75rem;">
        <option value="">Select location...</option>
        @foreach (var location in locations)
        {
            <option value="@location">@location</option>
        }
    </select>


    <!-- Buttons (moved below location field) -->
    <div class="button-container" style="display: flex; flex-direction: row; justify-content: space-between; align-items: center; gap: 1rem; max-width: 50%; flex-wrap: wrap;">
        @if (IsAuthenticated) 
        {
            <button @onclick="SaveBirthData" disabled=@isLoading1 style="flex-grow: 1;">Save Birth Data</button>
        }    
        <button @onclick="DescribeSigns" disabled=@isLoading1 style="flex-grow: 1;">Learn About My Signs</button>
        <button @onclick="DescribeHoroscope" disabled=@isLoading1 style="flex-grow: 1;">Learn About My Horoscope</button>
        <button @onclick="DescribeCompatibility" disabled=@isLoading1 style="flex-grow: 1;">Learn About My Compatibility</button>
    </div>


</div>

<!-- Spinner -->
<div style="display:@(isLoading1 ? "block" : "none"); margin: 20px; text-align: center;">
    <div class="spinner">
        <div class="diamond"></div>
    </div>
</div>

<!-- Response -->
<p>@sunSignDesc</p>

<br/>

<!-- Spinner -->
<div style="display:@(isLoading2 ? "block" : "none"); margin: 20px; text-align: center;">
    <div class="spinner">
        <div class="diamond"></div>
    </div>
</div>

<!-- Response -->
<p>@responseText</p>

@inject Blazored.SessionStorage.ISessionStorageService SessionStorage 

@code {
    private List<string> locations = new() { "New York, USA", "Los Angeles, USA", "Tokyo, Japan", "London, UK", 
    "San Francisco, USA", "Berlin, Germany", "Moscow, Russia", "Beijing, China", "Mumbai, India", "Rio de Janeiro", 
    "Brazil", "Cairo, Egypt", "Dubai, UAE", "Rome, Italy", "Bangkok, Thailand",
    "Paris, France", "Sydney, Australia", "Toronto, Canada", "Frisco, Texas", "Pune, India", "Hyderabad, India" };

    private const string BirthdayKey = "UserBirthday";
    private const string BirthTimeKey = "UserBirthTime";
    private const string BirthLocationKey = "UserBirthLocation";
    private const string UserInputKey = "UserInput";

    private bool IsAuthenticated => !string.IsNullOrEmpty(TokenStorage.GetToken());
    private string responseText = string.Empty;
    private string sunSignDesc = string.Empty;
    private bool isLoading1 = false;
    private bool isLoading2 = false;

    // session storage for user inpuits

    private DateTime birthday
    {
        get => _birthday;
        set
        {
            _birthday = value;
            SessionStorage.SetItemAsync(BirthdayKey, _birthday);
        }
    }
    private DateTime _birthday;

    private DateTime birthTime
    {
        get => _birthTime;
        set
        {
            _birthTime = value;
            SessionStorage.SetItemAsync(BirthTimeKey, _birthTime);
        }
    }
    private DateTime _birthTime;

    private string birthLocation
    {
        get => _birthLocation;
        set
        {
            _birthLocation = value;
            SessionStorage.SetItemAsync(BirthLocationKey, _birthLocation);
        }
    }
    private string _birthLocation = string.Empty;

    private Timer? debounceTimer;

    private string userInput
    {
        get => _userInput;
        set
        {
            _userInput = value;
            debounceTimer?.Dispose();
            debounceTimer = new Timer(async _ =>
            {
                await SessionStorage.SetItemAsync(UserInputKey, _userInput);
            }, null, 300, Timeout.Infinite);
        }
    }
    private string _userInput = string.Empty;

    @inject Blazored.SessionStorage.ISessionStorageService SessionStorage

    protected override async Task OnInitializedAsync()
    {
        // Load values from session storage on page load
        var storedBirthday = await SessionStorage.GetItemAsync<DateTime?>(BirthdayKey);
        var storedBirthTime = await SessionStorage.GetItemAsync<DateTime?>(BirthTimeKey);
        var storedBirthLocation = await SessionStorage.GetItemAsync<string>(BirthLocationKey);
        var storedUserInput = await SessionStorage.GetItemAsync<string>(UserInputKey);

        birthday = storedBirthday ?? DateTime.Now;
        birthTime = storedBirthTime ?? DateTime.Now;
        birthLocation = storedBirthLocation ?? string.Empty;
        userInput = storedUserInput ?? string.Empty;
    }

    
    @inject CacheService CacheService

    private async Task SaveBirthData()
    {
        isLoading1 = true; // Start the spinner
        sunSignDesc = string.Empty;

        try
        {
            var getEmail = TokenStorage.GetUserEmail() ?? "example@email.com";
            var birthData = new
            {
                Email = getEmail,
                Birthday = birthday.ToString("yyyy-MM-ddTHH:mm:ss"),
                BirthTime = birthTime.ToString("HH:mm:ss"),
                BirthLocation = birthLocation
            };

            var response = await Http.PostAsJsonAsync("http://localhost:5042/saveBirthday", birthData);

            if (response.IsSuccessStatusCode)
            {
                // Clear caches for user data
                CacheService.ClearCache("CurrentUserBirthCacheKey");
                CacheService.ClearCache("UserBirthsCacheKey");

                sunSignDesc = "Birth data saved successfully!";
            }
            else
            {
                sunSignDesc = "Failed to save birth data. Check if all fields are filled correctly.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
        finally
        {
            isLoading1 = false; // Stop the spinner
        }
    }


    private async Task DescribeSigns()
    {
        isLoading1 = true;
        sunSignDesc = string.Empty;
        try
        {
            var descString = await descStringAsync();
            if (string.IsNullOrWhiteSpace(birthLocation))
            {
                sunSignDesc = await GeminiService.AskGeminiAsync($"Describe my sun sign based on astrology. {descString}");
            }
            else
            {
                sunSignDesc = await GeminiService.AskGeminiAsync($"Describe my sun, rising, and moon signs based on astrology. {descString}");
            }
        }
        catch (Exception ex)
        {
            sunSignDesc = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading1 = false;
        }
    }

    private async Task DescribeHoroscope()
    {
        isLoading1 = true;
        sunSignDesc = string.Empty;
        try
        {
            var descString = await descStringAsync();
            sunSignDesc = await GeminiService.AskGeminiAsync($"Describe my horoscope based on astrology. {descString}");  
        }
        catch (Exception ex)
        {
            sunSignDesc = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading1 = false;
        }
    }

    private async Task DescribeCompatibility()
    {
        isLoading1 = true;
        sunSignDesc = string.Empty;
        try
        {
            var descString = await descStringAsync();
            sunSignDesc = await GeminiService.AskGeminiAsync($"Describe my compatibility based on astrology. {descString}");
        }
        catch (Exception ex)
        {
            sunSignDesc = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading1 = false;
        }
    }

    private async Task AskGemini()
    {
        isLoading2 = true;
        responseText = string.Empty;
        try
        {
            responseText = await GeminiService.AskGeminiAsync(userInput);
        }
        catch (Exception ex)
        {
            responseText = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading2 = false;
        }
    }

    @* returns signs in a list: index 0 is sun sign, 1 is moon sign and 2 is rising sign (moon and rising arent included if location not selected) *@
    private async Task<List<string>> getSignsAsync()
    {
        // Initialize loading state
        isLoading1 = true;

        try
        {
            // Create the JSON payload
            var payload = new
            {
                Birthday = birthday,
                BirthTime = birthTime.TimeOfDay, // Extract the time portion only
                BirthLocation = string.IsNullOrWhiteSpace(birthLocation) ? "" : birthLocation
            };

            // Send a POST request to the API endpoint
            var response = await Http.PostAsJsonAsync("http://localhost:5042/getSigns", payload);

            // Check for success
            if (response.IsSuccessStatusCode)
            {
                // Parse the JSON response
                var result = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();

                if (result != null)
                {
                    // Extract response values
                    Console.WriteLine("Signs retrieved successfully!");
                    return result.Values.ToList();
                }
            }
            else
            {
                // Handle errors from the API
                Console.WriteLine($"Failed to retrieve signs. Status Code: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            // Log and display any errors encountered
            Console.WriteLine($"An error occurred while retrieving signs: {ex.Message}");
        }
        finally
        {
            // Reset loading state
            isLoading1 = false;
        }

        return new List<string>(); // Return an empty list in case of failure
    }


    private async Task<string> descStringAsync()
    {
        var signs = await getSignsAsync();

        if (string.IsNullOrWhiteSpace(birthLocation))
        {
            return $"This is my birthday: {birthday:yyyy-MM-dd} and sun sign: {signs.ElementAtOrDefault(0)}";
        }
        return $"This is my birthday: {birthday:yyyy-MM-dd}, birth time: {birthTime:HH:mm:ss}, and location: {birthLocation}. " +
            $"These are my signs: sun sign: {signs.ElementAtOrDefault(0)}, moon sign: {signs.ElementAtOrDefault(1)}, and rising sign: {signs.ElementAtOrDefault(2)}";
    }

}
