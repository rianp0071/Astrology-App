@page "/chatbot"
@using Newtonsoft.Json
@using System.Text
@inject GeminiService GeminiService
@inject IJSRuntime JSRuntime

<PageTitle>Chatbot</PageTitle>

<head>
    <link rel="stylesheet" href="css/chatbot.css" />
</head>

<button @onclick="ToggleChatbot" class="chatbot-toggle">
    <span class="chat-icon">ðŸ’¬</span>
</button>

@if (isChatbotOpen)
{
    <div id="chatbot-container" class="chatbot-container">
        <div class="row">
            <div class="col-4">
                <div class="messages">
                    @for (int i = 0; i < messages.Count; i++)
                    {
                        @if (i % 2 == 0)
                        {
                            <div class="response">@messages[i]</div>
                        } 
                        else
                        {
                            <div class="question">@messages[i]</div>
                        }
                    }
                </div>
                <div class="textMessage">
                    <input @bind="message" />
                    <button @onclick="SendMessage">Send</button>
                    @if (isLoading)
                    {
                        <div class="typing-indicator">
                            <span></span>
                            <span></span>
                            <span></span>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}


@code{
    private bool isChatbotOpen = false; 
    private bool isInitialized = false;
    public required string message;
    private bool isLoading = false;
    public List<string> messages = new List<string>();
    private static HttpClient Http = new HttpClient();

    public async Task ToggleChatbot()
    {
        isChatbotOpen = !isChatbotOpen;

        // âœ… Run initialization logic only when chatbot is opened for the first time
        if (isChatbotOpen && !isInitialized)
        {
            isLoading = true;
            StateHasChanged(); // Refresh UI

            await Task.Delay(1000); // Simulate loading delay
            messages.Add("Hello! My name is Saturn and I will be your personal assistant! How can I assist you today?");
            
            isLoading = false;
            isInitialized = true; // âœ… Mark initialization as complete
            StateHasChanged();
        }
    }

    public async Task SendMessage()
    {
        isLoading = true;  // Start loading
        StateHasChanged(); // Force UI refresh

        Http = new HttpClient();
        messages.Add(message);

        var responseText = await GeminiService.AskGeminiAsync(message);
        messages.Add(responseText);
        
        isLoading = false;
        StateHasChanged();

        await Task.Delay(100); // Simulate a delay for loading
        await JSRuntime.InvokeVoidAsync("scrollBotToBottom");
    }
}
