@page "/"
@inject HttpClient Http

<section>
    <h1>Soulmate? Or Monster?</h1>
    <p>It's The Moment Of Truth</p>
    <section style="display: flex; flex-direction: row; gap: 2rem; max-width: 700px;">
        <div>
            <!-- Person 1 Details -->
            <h4>Lovebird 1</h4>
            <p>Name:</p>
            <input @bind="person1.Name" type="text" placeholder="Enter name..." style="width:300px;" />

            <p>Birthday:</p>
            <input @bind="person1.Birthday" type="date" style="width:300px;" />

            <p>Time of Birth:</p>
            <input @bind="person1.BirthTime" type="time" style="width:300px;" />

            <p>Location of Birth:</p>
            <select @bind="person1.BirthLocation" style="width:300px;">
                <option value="">Select location...</option>
                @foreach (var location in locations)
                {
                    <option value="@location">@location</option>
                }
            </select>
        </div>

        <div>
            <!-- Person 2 Details -->
            <h4>Lovebird 2</h4>
            <p>Name:</p>
            <input @bind="person2.Name" type="text" placeholder="Enter name..." style="width:300px;" />

            <p>Birthday:</p>
            <input @bind="person2.Birthday" type="date" style="width:300px;" />

            <p>Time of Birth:</p>
            <input @bind="person2.BirthTime" type="time" style="width:300px;" />

            <p>Location of Birth:</p>
            <select @bind="person2.BirthLocation" style="width:300px;">
                <option value="">Select location...</option>
                @foreach (var location in locations)
                {
                    <option value="@location">@location</option>
                }
            </select>
        </div>
    </section>


    <!-- Button -->
    <div style="margin-top:30px;">
        <button @onclick="GenerateCompatibility" style="width:300px;">Calculate Compatibility</button>
    </div>

    <!-- Spinner -->
    <div style="display:@(isLoading ? "block" : "none"); margin: 20px; text-align: center;">
        <div class="spinner">
            <div class="diamond"></div>
        </div>
    </div>

    <!-- Compatibility Result -->
    @if (!string.IsNullOrWhiteSpace(compatibilityMessage))
    {
        <h4>Compatibility Results:</h4>
        <p class="fade-in">@compatibilityMessage</p>
    }
</section>

@code {
    private PersonDetails person1 = new PersonDetails();
    private PersonDetails person2 = new PersonDetails();
    private List<string> locations = new() { "New York, USA", "Los Angeles, USA", "Tokyo, Japan", "London, UK", 
        "San Francisco, USA",   "Berlin, Germany", "Moscow, Russia", "Beijing, China", "Mumbai, India", "Rio de Janeiro", 
        "Brazil", "Cairo, Egypt", "Dubai, UAE", "Rome, Italy", "Bangkok, Thailand",
        "Paris, France", "Sydney, Australia", "Toronto, Canada", "Frisco, Texas", "Pune, India", "Hyderabad, India" };
    private bool isLoading = false;
    private string compatibilityMessage = string.Empty;

    private async Task GenerateCompatibility()
    {
        isLoading = true;
        compatibilityMessage = string.Empty;

        try
        {
            // Validate input
            if (string.IsNullOrWhiteSpace(person1.Name) || string.IsNullOrWhiteSpace(person2.Name) ||
                person1.Birthday == default || person2.Birthday == default ||
                string.IsNullOrWhiteSpace(person1.BirthLocation) || string.IsNullOrWhiteSpace(person2.BirthLocation))
            {
                compatibilityMessage = "Please provide valid details for both individuals.";
                return;
            }

            // Prepare request payload
            var compatibilityRequest = new
            {
                Person1 = new
                {
                    person1.Name,
                    person1.Birthday,
                    BirthTime = person1.BirthTime.ToString("HH:mm:ss"),
                    person1.BirthLocation
                },
                Person2 = new
                {
                    person2.Name,
                    person2.Birthday,
                    BirthTime = person2.BirthTime.ToString("HH:mm:ss"),
                    person2.BirthLocation
                }
            };

            // Send request to API
            var response = await Http.PostAsJsonAsync("http://localhost:5042/calculateCompatibility", compatibilityRequest);

            if (response.IsSuccessStatusCode)
            {
                compatibilityMessage = await response.Content.ReadAsStringAsync();
            }
            else
            {
                compatibilityMessage = "Failed to calculate compatibility. Please try again.";
            }
        }
        catch (Exception ex)
        {
            compatibilityMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class PersonDetails
    {
        public string Name { get; set; } = string.Empty;
        public DateTime Birthday { get; set; } = DateTime.Now;
        public DateTime BirthTime { get; set; } = DateTime.Now;
        public string BirthLocation { get; set; } = string.Empty;
    }
}
