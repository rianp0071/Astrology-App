@page "/"
@inject HttpClient Http

<section>
    <h1>Soulmate? Or Monster?</h1>
    <p>It's The Moment Of Truth</p>
    <section style="display: flex; flex-direction: row; gap: 2rem; max-width: 700px;">
        <div>
            <h4>Lovebird 1</h4>
            <p>Name:</p>
            <input @bind="Person1Name" type="text" placeholder="Enter name..." style="width:300px;" />

            <p>Birthday:</p>
            <input @bind="Person1Birthday" type="date" style="width:300px;" />

            <p>Time of Birth:</p>
            <input @bind="Person1BirthTime" type="time" style="width:300px;" />

            <p>Location of Birth:</p>
            <select @bind="Person1BirthLocation" style="width:300px;">
                <option value="">Select location...</option>
                @foreach (var location in locations)
                {
                    <option value="@location">@location</option>
                }
            </select>
        </div>

        <div>
            <h4>Lovebird 2</h4>
            <p>Name:</p>
            <input @bind="Person2Name" type="text" placeholder="Enter name..." style="width:300px;" />

            <p>Birthday:</p>
            <input @bind="Person2Birthday" type="date" style="width:300px;" />

            <p>Time of Birth:</p>
            <input @bind="Person2BirthTime" type="time" style="width:300px;" />

            <p>Location of Birth:</p>
            <select @bind="Person2BirthLocation" style="width:300px;">
                <option value="">Select location...</option>
                @foreach (var location in locations)
                {
                    <option value="@location">@location</option>
                }
            </select>
        </div>
    </section>


    <!-- Button -->
    <div style="margin-top:30px;">
        <button @onclick="GenerateCompatibility" style="width:300px;" disabled="@isLoading1">Calculate Compatibility</button>
    </div>

    <!-- Spinner -->
    <div style="display:@(isLoading1 ? "block" : "none"); margin: 20px; text-align: center;">
        <div class="spinner">
            <div class="diamond"></div>
        </div>
    </div>

    <!-- Compatibility Result -->
    @if (!string.IsNullOrWhiteSpace(compatibilityMessage))
    {
        <h4>Compatibility Results:</h4>
        <p class="fade-in">@compatibilityMessage</p>
            
        <button @onclick="ExplainCompatibility" style="width:300px;" disabled="@isLoading2">
            Explain Result
        </button>

        @if (!string.IsNullOrWhiteSpace(explanationMessage))
        {
            <h4>Explanation:</h4>
            <p class="fade-in">@explanationMessage</p>
        }
    }

        <!-- Spinner -->
    <div style="display:@(isLoading2 ? "block" : "none"); margin: 20px; text-align: center;">
        <div class="spinner">
            <div class="diamond"></div>
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(explanationMessage) && !feedbackGiven)
    {
        <h5>Did you like the explanation?</h5>
        <div style="display: flex; gap: 1rem; margin-top: 10px;">
            <button @onclick="HandleThumbsUp" style="width:150px;">üëç Awesome</button>
            <button @onclick="HandleThumbsDown" style="width:150px;">üëé This App Sucks</button>
        </div>
    }
    else
    {
        @if (feedbackType == "Thumbs Up")
        {
            <p class="fade-in"><em>üòä Glad you're enjoying the app!</em></p>
        }
        else if (feedbackType == "Thumbs Down")
        {
            <p class="fade-in"><em>üò° Leave an angry message:</em></p>
            <input @bind="angryMessage" type="text" placeholder="Vent your frustration..." style="width:300px;" />
            <button @onclick="SubmitAngryMessage">Submit</button>
        }
        else if (feedbackType == "AngrySubmission")
        {
            <p class="fade-in"><em>üò≠üò≠üò≠ We Are Very Very Sorry About your Experience! Your feedback has been noted!</em></p>
        }
    }


</section>

@inject Blazored.SessionStorage.ISessionStorageService SessionStorage

@code {
    private PersonDetails person1 = new PersonDetails();
    private PersonDetails person2 = new PersonDetails();
    private List<string> locations = new() { "New York, USA", "Los Angeles, USA", "Tokyo, Japan", "London, UK", 
        "San Francisco, USA", "Berlin, Germany", "Moscow, Russia", "Beijing, China", "Mumbai, India", "Rio de Janeiro", 
        "Brazil", "Cairo, Egypt", "Dubai, UAE", "Rome, Italy", "Bangkok, Thailand",
        "Paris, France", "Sydney, Australia", "Toronto, Canada", "Frisco, Texas", "Pune, India", "Hyderabad, India" };
    private bool isLoading1 = false;
    private bool isLoading2 = false;
    private string compatibilityMessage = string.Empty;

    private const string Person1Key = "Person1";
    private const string Person2Key = "Person2";

    // Reactive properties with session storage updates and logging
    private string Person1Name
    {
        get => person1.Name;
        set
        {
            person1.Name = value;
            Console.WriteLine($"[LOG] Person1Name set to: {value}");
            _ = SavePersonDetailsAsync(person1, Person1Key);
        }
    }

    private DateTime Person1Birthday
    {
        get => person1.Birthday;
        set
        {
            person1.Birthday = value;
            Console.WriteLine($"[LOG] Person1Birthday set to: {value}");
            _ = SavePersonDetailsAsync(person1, Person1Key);
        }
    }

    private DateTime Person1BirthTime
    {
        get => person1.BirthTime;
        set
        {
            person1.BirthTime = value;
            Console.WriteLine($"[LOG] Person1BirthTime set to: {value}");
            _ = SavePersonDetailsAsync(person1, Person1Key);
        }
    }

    private string Person1BirthLocation
    {
        get => person1.BirthLocation;
        set
        {
            person1.BirthLocation = value;
            Console.WriteLine($"[LOG] Person1BirthLocation set to: {value}");
            _ = SavePersonDetailsAsync(person1, Person1Key);
        }
    }

    private string Person2Name
    {
        get => person2.Name;
        set
        {
            person2.Name = value;
            Console.WriteLine($"[LOG] Person2Name set to: {value}");
            _ = SavePersonDetailsAsync(person2, Person2Key);
        }
    }

    private DateTime Person2Birthday
    {
        get => person2.Birthday;
        set
        {
            person2.Birthday = value;
            Console.WriteLine($"[LOG] Person2Birthday set to: {value}");
            _ = SavePersonDetailsAsync(person2, Person2Key);
        }
    }

    private DateTime Person2BirthTime
    {
        get => person2.BirthTime;
        set
        {
            person2.BirthTime = value;
            Console.WriteLine($"[LOG] Person2BirthTime set to: {value}");
            _ = SavePersonDetailsAsync(person2, Person2Key);
        }
    }

    private string Person2BirthLocation
    {
        get => person2.BirthLocation;
        set
        {
            person2.BirthLocation = value;
            Console.WriteLine($"[LOG] Person2BirthLocation set to: {value}");
            _ = SavePersonDetailsAsync(person2, Person2Key);
        }
    }

    private async Task SavePersonDetailsAsync(PersonDetails person, string key)
    {
        try
        {
            var jsonPerson = System.Text.Json.JsonSerializer.Serialize(person);
            await SessionStorage.SetItemAsync(key, jsonPerson);
            Console.WriteLine($"[LOG] Successfully saved {key} to session storage.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ERROR] Error saving {key} to session storage: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("[LOG] Initializing component and loading session storage data...");

            var storedPerson1 = await SessionStorage.GetItemAsync<string>(Person1Key);
            var storedPerson2 = await SessionStorage.GetItemAsync<string>(Person2Key);

            person1 = !string.IsNullOrWhiteSpace(storedPerson1)
                ? System.Text.Json.JsonSerializer.Deserialize<PersonDetails>(storedPerson1)!
                : new PersonDetails();

            person2 = !string.IsNullOrWhiteSpace(storedPerson2)
                ? System.Text.Json.JsonSerializer.Deserialize<PersonDetails>(storedPerson2)!
                : new PersonDetails();

            Console.WriteLine($"[LOG] Loaded Person1: {System.Text.Json.JsonSerializer.Serialize(person1)}");
            Console.WriteLine($"[LOG] Loaded Person2: {System.Text.Json.JsonSerializer.Serialize(person2)}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ERROR] Error during initialization: {ex.Message}");
        }
    }

    private AstrologyPersonSigns person1Signs = new AstrologyPersonSigns() 
    {
        SunSign = string.Empty,
        MoonSign = string.Empty,
        RisingSign = string.Empty
    };
    private AstrologyPersonSigns person2Signs = new AstrologyPersonSigns
    {
        SunSign = string.Empty,
        MoonSign = string.Empty,
        RisingSign = string.Empty
    };

    private async Task GenerateCompatibility()
    {
        isLoading1 = true;
        compatibilityMessage = string.Empty;
        explanationMessage = string.Empty;

        Console.WriteLine("[LOG] GenerateCompatibility called...");

        // Reset feedback section
        feedbackGiven = false;
        feedbackType = string.Empty;
        angryMessage = string.Empty;

        try
        {
            // Validate input
            if (string.IsNullOrWhiteSpace(person1.Name) || string.IsNullOrWhiteSpace(person2.Name) ||
                person1.Birthday == default || person2.Birthday == default)
            {
                compatibilityMessage = "Please provide valid details for both individuals.";
                Console.WriteLine("[ERROR] Validation failed: Missing or invalid details.");
                return;
            }

            // **Step 1: Fetch Signs for Person 1 and Store Directly**
            var person1SignsResponse = await Http.PostAsJsonAsync("http://localhost:5042/getSigns", new
            {
                Birthday = person1.Birthday,
                BirthTime = person1.BirthTime.ToString("HH:mm:ss"),
                BirthLocation = person1.BirthLocation
            });

            person1Signs = await person1SignsResponse.Content.ReadFromJsonAsync<AstrologyPersonSigns>() ?? new AstrologyPersonSigns
            {
                SunSign = string.Empty,
                MoonSign = string.Empty,
                RisingSign = string.Empty
            };
            // **Step 2: Fetch Signs for Person 2 and Store Directly**
            var person2SignsResponse = await Http.PostAsJsonAsync("http://localhost:5042/getSigns", new
            {
                Birthday = person2.Birthday,
                BirthTime = person2.BirthTime.ToString("HH:mm:ss"),
                BirthLocation = person2.BirthLocation
            });

            person2Signs = await person2SignsResponse.Content.ReadFromJsonAsync<AstrologyPersonSigns>() ?? new AstrologyPersonSigns
            {
                SunSign = string.Empty,
                MoonSign = string.Empty,
                RisingSign = string.Empty
            };
            // Check if signs were fetched properly
            if (string.IsNullOrWhiteSpace(person1Signs.SunSign) || string.IsNullOrWhiteSpace(person2Signs.SunSign))
            {
                compatibilityMessage = "Failed to fetch astrology signs.";
                Console.WriteLine("[ERROR] Sign retrieval failed.");
                return;
            }

            Console.WriteLine($"[LOG] Stored signs for Person1: {person1Signs.SunSign}, {person1Signs.MoonSign}, {person1Signs.RisingSign}");
            Console.WriteLine($"[LOG] Stored signs for Person2: {person2Signs.SunSign}, {person2Signs.MoonSign}, {person2Signs.RisingSign}");

            // **Step 3: Calculate Compatibility Using Stored Signs**
            var compatibilityRequest = new
            {
                Person1 = person1Signs,
                Person2 = person2Signs
            };

            var compatibilityResponse = await Http.PostAsJsonAsync("http://localhost:5042/calculateCompatibilityWithSigns", compatibilityRequest);

            if (compatibilityResponse.IsSuccessStatusCode)
            {
                compatibilityMessage = await compatibilityResponse.Content.ReadAsStringAsync();
                Console.WriteLine($"[LOG] Compatibility response: {compatibilityMessage}");
            }
            else
            {
                compatibilityMessage = "Failed to calculate compatibility. Please try again.";
                Console.WriteLine($"[ERROR] API call failed with status code: {compatibilityResponse.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            compatibilityMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine($"[ERROR] Exception during compatibility generation: {ex.Message}");
        }
        finally
        {
            isLoading1 = false;
        }
    }


    private string explanationMessage = string.Empty;

    private async Task ExplainCompatibility()
    {
        isLoading2 = true;
        explanationMessage = string.Empty;
        Console.WriteLine("[LOG] ExplainCompatibility called...");

        try
        {
            // Validate input
            if (string.IsNullOrWhiteSpace(compatibilityMessage))
            {
                Console.WriteLine("[ERROR] Compatibility message is missing.");
                return;
            }

            // extract the score from the compatibility message
            string scoreOnly = new string(compatibilityMessage.Where(char.IsDigit).ToArray());

            Console.WriteLine(scoreOnly); 

            // Prepare the request to Gemini AI
            var geminiInput = $"Explain the compatibility result for:\nPerson 1 - Name: {Person1Name}, Sun: {person1Signs.SunSign}, Moon: {person1Signs.MoonSign}, Rising: {person1Signs.RisingSign}\n" +
                            $"Person 2 - Name: {Person2Name}, Sun: {person2Signs.SunSign}, Moon: {person2Signs.MoonSign}, Rising: {person2Signs.RisingSign}\n" +
                            $"Compatibility Score: {scoreOnly}.";

            Console.WriteLine($"[LOG] Sending request to Gemini AI: {geminiInput}");

            // Call the Gemini service
            explanationMessage = await geminiService.AskGeminiAsync(geminiInput);

            Console.WriteLine($"[LOG] Gemini Explanation response: {explanationMessage}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ERROR] Exception during Gemini explanation: {ex.Message}");
            explanationMessage = "An error occurred while fetching the explanation.";
        }
        finally
        {
            isLoading2 = false;
        }
    }

    @inject GeminiService geminiService

    private bool feedbackGiven = false;
    private string feedbackType = string.Empty;
    private string angryMessage = string.Empty;


    private async Task HandleThumbsUp()
    {
        Console.WriteLine("[LOG] User gave a thumbs up for the explanation.");
        feedbackGiven = true;
        feedbackType = "Thumbs Up";
        await SaveUserFeedbackAsync("Thumbs Up");
    }

    private async Task HandleThumbsDown()
    {
        Console.WriteLine("[LOG] User gave a thumbs down for the explanation.");
        feedbackGiven = true;
        feedbackType = "Thumbs Down";
        await SaveUserFeedbackAsync("Thumbs Down");
    }

    private async Task SubmitAngryMessage()
    {
        Console.WriteLine($"[LOG] Angry feedback received: {angryMessage}");

        var feedback = new
        {
            Person1 = person1.Name,
            Person2 = person2.Name,
            CompatibilityMessage = compatibilityMessage,
            ExplanationMessage = explanationMessage,
            Feedback = "Thumbs Down",
            AngryMessage = angryMessage
        };

        await SaveUserFeedbackAsync(angryMessage);
        feedbackType = "AngrySubmission";
    }



    private async Task SaveUserFeedbackAsync(string feedbackType)
    {
        try
        {
            var feedback = new
            {
                Person1 = person1.Name,
                Person2 = person2.Name,
                CompatibilityMessage = compatibilityMessage,
                ExplanationMessage = explanationMessage,
                Feedback = feedbackType
            };

            Console.WriteLine($"[LOG] Sending feedback: {System.Text.Json.JsonSerializer.Serialize(feedback)}");

            // await Http.PostAsJsonAsync("http://localhost:5042/saveFeedback", feedback);
            await Task.Delay(10); // Simulate a delay for saving feedback
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ERROR] Failed to save feedback: {ex.Message}");
        }
    }


    public class AstrologyPersonSigns
    {
        public required string SunSign { get; set; } = string.Empty;
        public required string MoonSign { get; set; } = string.Empty;
        public required string RisingSign { get; set; } = string.Empty;
    }


    public class PersonDetails
    {
        public string Name { get; set; } = string.Empty;
        public DateTime Birthday { get; set; } = DateTime.Now;
        public DateTime BirthTime { get; set; } = DateTime.Now;
        public string BirthLocation { get; set; } = string.Empty;
    }
}
